# This is a basic workflow to help you get started with Actions

name: Combined

on:
  workflow_dispatch:
  
    
  
    inputs:
        repo_name:
          description: 'name of repository'
          required: true
          default: 'Codec'

jobs:
  
  steps_1-3_gathering_data:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
 
    steps:
      - uses: actions/checkout@v2

      - name: build essentials
        run: sudo apt install build-essential
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          
      - name: download requirements
        run: |
              cd `git rev-parse --show-toplevel`
              pip install pipreqs
              pipreqs --ignore diagnoser,sfl_diagnoser .
              pip install -r requirements.txt
              pip install pyarrow
              pip install fastparquet
      
      - name: gathering
        run: |
              cd `git rev-parse --show-toplevel`
              python Run.py ${{github.event.inputs.repo_name}}
      # Runs a set of commands using the runners shell

      - name: Upload data
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          # Artifact name
          name: steps_1-3_artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: ./projects
          
          
  step_4_topic_modeling:
  
    needs: steps_1-3_gathering_data
    
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
       files: [0, 1, 2, 3]
    
    steps:
      - uses: actions/checkout@v2

      - name: build essentials
        run: sudo apt install build-essential
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          
      - name: download requirements
        run: |
              cd `git rev-parse --show-toplevel`
              pip install pipreqs
              pipreqs --ignore diagnoser,sfl_diagnoser .
              pip install -r requirements.txt
              pip install pyarrow
              pip install fastparquet
      
      - name: create folder "projects"
        run: |
              cd `git rev-parse --show-toplevel`
              mkdir projects
              
      - name: Download results for - 
        uses: actions/download-artifact@v2
        with:
          name: steps_1-3_artifact
          path: ./projects
          
      - name: topic modeling
        run: |
              cd `git rev-parse --show-toplevel`
              python topicModeling.py ${{github.event.inputs.repo_name}} ${{matrix.files}}
      - name: Upload data
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          # Artifact name
          name: step_4_artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: ./projects


  step_5_other_methods:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    
    strategy:
      fail-fast: false
      matrix:
        #[BLUiR, AmaLgam , BLIA]
        techniques: [BugLocator,  BRTracer, Locus ]
        #techniques: [BugLocator, BRTracer]
        #group: [Commons]
        #folder_name: [BugLocator_lang]
    
    outputs:
       technique: ${{matrix.techniques}}
 
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    
    - uses: actions/checkout@v2
      with:
        repository: matanhaz/Bench4BL
    - name: first
      run: sudo apt install build-essential
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'

    # Runs a set of commands using the runners shell
#     - name: Download subjects’ archives
#       run: |
#             pip install virtualenv
#             pip install jq
            
#             cd `git rev-parse --show-toplevel`
#             bootstrap/downloads.sh
#     # Runs a set of commands using the runners shell
#     - name: Download subjects’ archives
#       run: |
#             mkdir data
#             name=${{github.event.inputs.repo_name}}
#             project=$(echo $(jq ".$name.project" project_info.txt) | tr -d '\"')
#             group=$(echo $(jq ".$name.group" project_info.txt) | tr -d '\"')
#             bootstrap/unpacking.sh ./archives ./data $group $project


    - name: Download subjects’ archives
      run: |
              pip install virtualenv
              cd `git rev-parse --show-toplevel`
              sudo apt install unzip
              mkdir data
              name=${{github.event.inputs.repo_name}}
              project=$(echo $(jq ".$name.project" project_info.txt) | tr -d '\"')
              unzip archives/$project.zip -d data
              
    - name: Install Indri
      run: |
          mkdir depots
          cd depots
          wget https://excellmedia.dl.sourceforge.net/project/lemur/lemur/indri-5.15/indri-5.15.tar.gz
          tar -xzf indri-5.15.tar.gz
          cd indri-5.15
          ./configure --prefix=`pwd`/../install
          make
          make install
    - name: Generate Settings.txt file
      run: |
          echo indripath=`git rev-parse --show-toplevel`/depots/install/bin/ > `git rev-parse --show-toplevel`/techniques/Settings.txt
    - name: Create virtual environment
      run: |
          cd `git rev-parse --show-toplevel`
          virtualenv venv -p `which python2`
          # source venv/bin/activate
          pip install -r requirements.txt
    - name: Build JAR
      run: |
          bootstrap/buildjar.sh
#       - name: Source virtual environment
#         run: |
#             cd `git rev-parse --show-toplevel`
#             .venv/bin/activate

    - name: Modify PATH
      run: |
          export PATH=$PATH:`pwd`/depots/install/bin
    - name: ls
      run: ls -R

    - name: Inflate the source codes
      run: |
          cd `git rev-parse --show-toplevel`
          name=${{github.event.inputs.repo_name}}
          project=$(echo $(jq ".$name.project" project_info.txt) | tr -d '\"')
          group=$(echo $(jq ".$name.group" project_info.txt) | tr -d '\"')
          cd `git rev-parse --show-toplevel`/scripts
          python launcher_GitInflator.py  -g $group -p $project
    - name: Build bug repositories
      run: |
            cd `git rev-parse --show-toplevel`
            name=${{github.event.inputs.repo_name}}
            project=$(echo $(jq ".$name.project" project_info.txt) | tr -d '\"')
            group=$(echo $(jq ".$name.group" project_info.txt) | tr -d '\"')
            cd `git rev-parse --show-toplevel`/scripts
            python launcher_repoMaker.py  -g $group -p $project
            python launcher_DupRepo.py  -g $group -p $project
            python Counting.py  -g $group -p $project
#       - name: Execute previous techniques
#         run: |
#               mkdir -p ../techniques/locus_properties
#               mkdir -p ../techniques/blia_properties
#               cd `git rev-parse --show-toplevel`/scripts
#               python launcher_Tool.py -w Exp1   -g Apache -p CAMEL



    - name: Collect performance results
      run: |
            cd `git rev-parse --show-toplevel`
            
            name=${{github.event.inputs.repo_name}}
            project=$(echo $(jq ".$name.project" project_info.txt) | tr -d '\"')
            group=$(echo $(jq ".$name.group" project_info.txt) | tr -d '\"')
            cd `git rev-parse --show-toplevel`/scripts
            mkdir -p ../techniques/locus_properties
            mkdir -p ../techniques/blia_properties
            python launcher_Tool.py -w ${{matrix.techniques}}_${{github.event.inputs.repo_name}}   -g $group -p $project -t ${{matrix.techniques}}
#              python launcher_Tool.py -w ExpFirst   -g Apache -p CAMEL -t ${{ matrix.techniques }}

#     - name: save performance results
#       run: |
#             cd `git rev-parse --show-toplevel`/scripts
#             python launcher_XLSResultsAll.py -w ${{matrix.techniques}}_${{github.event.inputs.repo_name}}
            
    - name: Script
      run: |
            from os import listdir, makedirs
            from os.path import join, isdir
            import shutil

            folder_name = list(listdir(join('.','expresults')))[0]
            group = list(listdir(join('.','expresults', folder_name)))[0]
            project = list(listdir(join('.','expresults', folder_name, group)))[0]
            path = join('.','expresults',folder_name,group, project)
            new_path = join('.','expresults2',folder_name,group, project)
            makedirs(new_path)

            a= listdir(path)
            for dir in a:
                dir_path = join(path, dir)
                if isdir(dir_path) and "recommended" in listdir(dir_path):
                    dir_new_path = join(new_path, dir, "recommended")
                    makedirs(dir_new_path)
                    for file in listdir(join(dir_path, "recommended")):
                        original = join(dir_path, "recommended",file)
                        target = join(dir_new_path, file)
                        shutil.copyfile(original, target)
      shell: python

    - name: Upload data
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: other_methods_all_data
        # A file, directory or wildcard pattern that describes what to upload
        path: ./expresults
        
    - name: Upload data
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        # Artifact name
        name: step_5_artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: ./expresults2
  
  
  step_6_modify_other_methods_data:
    needs: [step_5_other_methods,step_4_topic_modeling, steps_1-3_gathering_data]
    
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: build essentials
        run: sudo apt install build-essential
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          
      - name: download requirements
        run: |
              cd `git rev-parse --show-toplevel`
              pip install pipreqs
              pipreqs --ignore diagnoser,sfl_diagnoser .
              pip install -r requirements.txt
              pip install pyarrow
              pip install fastparquet
      
      - name: create folder "projects"
        run: |
              cd `git rev-parse --show-toplevel`
              mkdir projects
              
      - name: Download results step 4
        uses: actions/download-artifact@v2
        with:
          name: step_4_artifact
          path: ./projects
          
      - name: Download results step 5
        uses: actions/download-artifact@v2
        with:
          name: step_5_artifact
          path: ./projects/${{github.event.inputs.repo_name}}
          
      - name: modify
        run: |
              cd `git rev-parse --show-toplevel`
              python modify_other_methods_data.py ${{github.event.inputs.repo_name}} 
              
      - name: Upload data
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          # Artifact name
          name: step_6_artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: ./projects
  
  
  step_7_download_matrixes:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: build essentials
        run: sudo apt install build-essential
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
         python-version: 3.8

      - name: download requirements
        run: |
              cd `git rev-parse --show-toplevel`
              pip install pipreqs
              pipreqs --ignore diagnoser,sfl_diagnoser .
              pip install -r requirements.txt
              pip install pyarrow
              pip install fastparquet
      - name: create dir matrixes
        run: |
              cd `git rev-parse --show-toplevel`
              mkdir matrixes_before_change
              
      - name: unzip matrixes
        run: |
              cd `git rev-parse --show-toplevel`
              sudo apt install unzip
              unzip matrixes/${{github.event.inputs.repo_name}}.zip -d matrixes/${{github.event.inputs.repo_name}}
              
              
      - name: Script
        run: |
              import os
              active_bugs = False
              path = os.path.join('.','matrixes',"${{github.event.inputs.repo_name}}")
              a= os.listdir(path)
              print(a)
              for file in a:
                  if 'bug-mining' in file:
                      p = os.path.join(path,file)
                      old = os.path.join(p,'framework', 'projects',"${{github.event.inputs.repo_name}}",f"matrix_{file.split('_')[1]}_full.json")
                      new = os.path.join('.',"matrixes_before_change",f"{file.split('_')[1]}.json")
                      if os.path.exists(old):
                          os.rename(old,new)
                      if not active_bugs:
                          active_bugs = True
                          os.rename(os.path.join(p,'framework', 'projects',"${{github.event.inputs.repo_name}}","active-bugs.csv"),os.path.join('.',"matrixes_before_change","active-bugs.csv"))
        shell: python
      
      - name: Upload bug-mining
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          # Artifact name
          name: step_7_artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: ./matrixes_before_change
        

  step_8_barinel:
    needs: [step_5_other_methods,step_4_topic_modeling, steps_1-3_gathering_data, step_6_modify_other_methods_data, step_7_download_matrixes]
    
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
       type: [old, new]

    steps:
      - uses: actions/checkout@v2

      - name: build essentials
        run: sudo apt install build-essential
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          
      - name: download requirements
        run: |
              cd `git rev-parse --show-toplevel`
              pip install pipreqs
              pipreqs --ignore diagnoser,sfl_diagnoser .
              pip install -r requirements.txt
              pip install pyarrow
              pip install fastparquet
              
      
      - name: create folder "projects"
        run: |
              cd `git rev-parse --show-toplevel`
              mkdir projects
              
      - name: Download results step 6
        uses: actions/download-artifact@v2
        with:
          name: step_6_artifact
          path: ./projects
      
      - name: create folder "barinel"
        run: |
              cd `git rev-parse --show-toplevel`
              cd projects
              cd ${{github.event.inputs.repo_name}}
              mkdir barinel
              cd barinel
              mkdir matrixes_before_change
              mkdir matrixes
      
      - name: Download results step 7
        uses: actions/download-artifact@v2
        with:
          name: step_7_artifact
          path: ./projects/${{github.event.inputs.repo_name}}/barinel/matrixes_before_change
          
      - name: barinel
        run: |
              cd `git rev-parse --show-toplevel`
              python sfl_diagnoser/main.py ${{github.event.inputs.repo_name}} git ${{matrix.type}}
              python experiments.py ${{github.event.inputs.repo_name}}
              
      - name: Upload data
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          # Artifact name
          name: step_8_artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: ./projects

          
  step_9_Experiments:
    needs: [step_8_barinel]
    
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: build essentials
        run: sudo apt install build-essential
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          
      - name: download requirements
        run: |
              cd `git rev-parse --show-toplevel`
              pip install pipreqs
              pipreqs --ignore diagnoser,sfl_diagnoser .
              pip install -r requirements.txt
              pip install pyarrow
              pip install fastparquet
              
      
      - name: create folder "projects"
        run: |
              cd `git rev-parse --show-toplevel`
              mkdir projects
              
      - name: Download results step 8
        uses: actions/download-artifact@v2
        with:
          name: step_8_artifact
          path: ./projects
      
          
      - name: experiments
        run: |
              cd `git rev-parse --show-toplevel`
              python experiments.py ${{github.event.inputs.repo_name}}
              
      - name: Upload data
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          # Artifact name
          name: step_9_artifact
          # A file, directory or wildcard pattern that describes what to upload
          path: ./projects
          
          
            
      - name: Upload results only
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          # Artifact name
          name: results_only
          # A file, directory or wildcard pattern that describes what to upload
          path: ./projects/${{github.event.inputs.repo_name}}/Experiments

        
   # - name: Upload math result for job 2
   #   uses: actions/upload-artifact@v2
   #   with:
   #     name: homework
   #       path: ./math-homework.txt
